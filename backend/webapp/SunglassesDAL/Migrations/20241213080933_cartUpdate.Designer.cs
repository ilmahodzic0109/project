// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SunglassesDAL.Model;

#nullable disable

namespace SunglassesDAL.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20241213080933_cartUpdate")]
    partial class cartUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SunglassesDAL.Model.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("BrandId")
                        .HasName("PK__Brand__06B772993BFC65BF");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("addedAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__415B03B82766E2AA");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("colorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("ColorId")
                        .HasName("PK__Color__70A64FDDEA7A9062");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("conditionId");

                    b.Property<bool>("Name")
                        .HasColumnType("bit")
                        .HasColumnName("name");

                    b.HasKey("ConditionId")
                        .HasName("PK__Conditio__A29757BCA37FCE50");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("genderId");

                    b.Property<bool>("Name")
                        .HasColumnType("bit")
                        .HasColumnName("name");

                    b.HasKey("GenderId")
                        .HasName("PK__Gender__306E22405653D339");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasColumnName("postalCode");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__0809335D62E633A0");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderDetailsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderId");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("priceAtPurchase");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("subtotal");

                    b.Property<int>("VersionId")
                        .HasColumnType("int")
                        .HasColumnName("versionId");

                    b.HasKey("OrderDetailsId")
                        .HasName("PK__OrderDet__5EEE5273DA02BB73");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VersionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderId");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFC6BDDC99DE");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("colorId");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("conditionId");

                    b.Property<DateOnly?>("DatePublished")
                        .HasColumnType("date")
                        .HasColumnName("datePublished");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("int")
                        .HasColumnName("deliveryTime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int")
                        .HasColumnName("productCategory");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shippingPrice");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__2D10D16AE5565B2C");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("Gender");

                    b.HasIndex("ProductCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("productCategoryId");

                    b.Property<bool>("Category")
                        .HasColumnType("bit")
                        .HasColumnName("category");

                    b.HasKey("ProductCategoryId")
                        .HasName("PK__ProductC__A944253B33C4D4B3");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductInventory", b =>
                {
                    b.Property<int>("ProductInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productInventoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInventoryId"));

                    b.Property<int>("ItemSold")
                        .HasColumnType("int")
                        .HasColumnName("itemSold");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantityInStock");

                    b.HasKey("ProductInventoryId")
                        .HasName("PK__ProductI__5F0EFFD7CB1F083E");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("versionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DatePublished")
                        .HasColumnType("date")
                        .HasColumnName("datePublished");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("model");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.HasKey("VersionId")
                        .HasName("PK__ProductV__E772A490E8A5327B");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("SunglassesDAL.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<bool>("IsLogged")
                        .HasColumnType("bit")
                        .HasColumnName("isLogged");

                    b.Property<DateOnly?>("ModifiedAt")
                        .HasColumnType("date")
                        .HasColumnName("modifiedAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFF54393212");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164A178E0CE")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SunglassesDAL.Model.Cart", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__productId__60A75C0F");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Order", b =>
                {
                    b.HasOne("SunglassesDAL.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__userId__6C190EBB");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SunglassesDAL.Model.OrderDetail", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__order__778AC167");

                    b.HasOne("SunglassesDAL.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__produ__787EE5A0");

                    b.HasOne("SunglassesDAL.Model.ProductVersion", "Version")
                        .WithMany("OrderDetails")
                        .HasForeignKey("VersionId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__versi__797309D9");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Payment", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__orderId__6EF57B66");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Product", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__brandI__59FA5E80");

                    b.HasOne("SunglassesDAL.Model.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__colorI__5629CD9C");

                    b.HasOne("SunglassesDAL.Model.Condition", "Condition")
                        .WithMany("Products")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__condit__571DF1D5");

                    b.HasOne("SunglassesDAL.Model.Gender", "GenderNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Gender")
                        .IsRequired()
                        .HasConstraintName("FK__Products__gender__5812160E");

                    b.HasOne("SunglassesDAL.Model.ProductCategory", "ProductCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategory")
                        .IsRequired()
                        .HasConstraintName("FK__Products__produc__59063A47");

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Condition");

                    b.Navigation("GenderNavigation");

                    b.Navigation("ProductCategoryNavigation");
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductInventory", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIn__produ__5CD6CB2B");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductVersion", b =>
                {
                    b.HasOne("SunglassesDAL.Model.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductVe__produ__72C60C4A");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Condition", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Gender", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SunglassesDAL.Model.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SunglassesDAL.Model.ProductVersion", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SunglassesDAL.Model.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
